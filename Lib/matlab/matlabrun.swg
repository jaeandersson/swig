SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","function %s requires at least %i arguments", func_name, min_args);
  else
    return true;
  return false;
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME void SWIG_Error(int code, const char *msg) {
  mexWarnMsgIdAndTxt(SWIG_ErrorType(code),msg);
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata)                      SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
  void *ptr;
  swig_type_info *type;
  int own;
  SwigPtr* next;
} SwigPtr;
static SwigPtr *swigPtr=0;
static size_t swigPtrSize=0, swigPtrNumAlloc=0;
static char const * storagename = "swig" SWIG_name_d "directorstorage";

/* Linked list of unused elements in swigPtr */
typedef struct SwigUnused {
  size_t ind;
  struct SwigUnused *next;
} SwigUnused;
static SwigUnused *swigUnused=0;

/* Get a pointer object
   Returns a SwigPtr* with the object if successful, otherwise 0
 */
SwigPtr* SWIG_Matlab_GetPointer(size_t ind) {
  if (ind==0 || ind>=swigPtrSize) {
    return 0;
  } else {
    return swigPtr+ind;
  }
}

/* Function pointer to SWIG_Matlab_GetPointer */
typedef SwigPtr* (*SWIG_Matlab_GetPointerPtr)(size_t ind);

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm, size_t *out_ind, int *external) {
  char *buf;
  size_t buflen;
  SWIG_Matlab_GetPointerPtr getPointer = SWIG_Matlab_GetPointer;

  /* Get module name */
  mxArray *pm_mod = mxGetProperty(pm, 0, "swigMod");
  if(!mxIsChar(pm_mod) || (mxGetM(pm_mod) != 1)){
    if(pm_mod) mxDestroyArray(pm_mod);
    return 0;
  }
  buflen = mxGetN(pm_mod) + 1;
  buf = (char *)mxMalloc(buflen);
  if (mxGetString(pm_mod, buf, (mwSize)buflen)) {
    mxDestroyArray(pm_mod);
    mxFree(buf);
    return 0;
  }

  /* Get function pointer if from another module */
  if(strcmp(buf, SWIG_name_d) != 0)
  {
     mxArray *pm_output;
     mxArray *pm_input = mxCreateDoubleScalar(3.0); /* Index 3 */
     mxArray *ex = mexCallMATLABWithTrap(1, &pm_output, 1, &pm_input, buf);
     if(ex) mexErrMsgIdAndTxt("SWIG:getSwigPtr","mexCallMATLABWithTrap failed for %s",buf);
     getPointer = (SWIG_Matlab_GetPointerPtr)(*(uint64_T *)mxGetData(pm_output));
     if (external) *external = 1;
  } else {
     if (external) *external = 0;
  }
  mxDestroyArray(pm_mod);
  mxFree(buf);

  /* Get index, represented as a uint64_T scalar */
  mxArray *pm_ind = mxGetProperty(pm, 0, "swigInd");
  if(!pm_ind || mxGetNumberOfElements(pm_ind) != 1 ||
     mxGetClassID(pm_ind) != mxUINT64_CLASS || mxIsComplex(pm_ind)){
    if(pm_ind) mxDestroyArray(pm_ind);
    return 0;
  }
  size_t ind = (size_t)(*(uint64_T*)mxGetData(pm_ind));
  if (out_ind) *out_ind = ind;
  mxDestroyArray(pm_ind);

  /* Get pointer object */
  return getPointer(ind);
}

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
SWIGRUNTIME int SWIG_Matlab_NewPointer(size_t* ind_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!ind_ptr || !type) return 1;
  size_t ind;

  /* If first time encountered, allocate memory (first element null pointer) */
  if (swigPtrNumAlloc==0) {
    swigPtr=(SwigPtr *)malloc(sizeof(SwigPtr));
    if (!swigPtr) return 1;
    swigPtrNumAlloc=swigPtrSize=1;
  }

  if (swigUnused) {
    /* Get a freed object from the stack  */
    ind = swigUnused->ind;
    /* Pop the element from the stack */
    SwigUnused *next = swigUnused->next;
    free(swigUnused);
    swigUnused = next;
  } else {
    /* Add element at the end */
    if (swigPtrSize==swigPtrNumAlloc) {
      /* Increase size of swigPtr */
      SwigPtr *new_mem = (SwigPtr *)realloc(swigPtr, (2*swigPtrNumAlloc)*sizeof(SwigPtr));
      if (!new_mem) return 1;
      swigPtr=new_mem;
      swigPtrNumAlloc *= 2;
    }
    ind = swigPtrSize++;
  }

  /* Increase lock count */
  mexLock();

  /* Initialize object */
  SwigPtr *obj = swigPtr + ind;
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  obj->next = 0;
  
  /* Return memory reference and successful return */
  *ind_ptr = ind;
  return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
SWIGRUNTIME void* SWIG_Matlab_DeletePointer(size_t ind) {
  /* Quick return if null pointer? */
  if (ind==0) return 0;

  /* Get pointer */
  SwigPtr* p = SWIG_Matlab_GetPointer(ind);
  if (!p) {
    mexWarnMsgIdAndTxt("SWIG:DeletePointer", "No such element");
    return 0;
  }

  /* Decrease lock count */
  mexUnlock();

  /* Add to list of unused elements */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  p->next=0;
  SwigUnused *next = swigUnused;
  swigUnused = (SwigUnused *)malloc(sizeof(SwigUnused));
  swigUnused->ind = ind;
  swigUnused->next = next;
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {

  /* Free allocated memory for pointers */
  if (swigPtr) {
    /* Free any stray pointers if they exist */
    for(size_t ii=1; ii<swigPtrSize; ++ii)
    {
        SwigPtr *temp = SWIG_Matlab_GetPointer(ii);
        if(temp && temp->ptr) {
          free(temp->ptr);
          temp->ptr = 0;
        }
    }
    free(swigPtr);
    swigPtr=0;
    swigPtrSize=swigPtrNumAlloc=0;
  }

  /* Free stack with indices of unused pointers */
  while (swigUnused) {
    SwigUnused *next = swigUnused->next;
    free(swigUnused);
    swigUnused = next;
  }

}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  mxArray *pm_ind = 0;

  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */  
  size_t ind;
  if (SWIG_Matlab_NewPointer(&ind, ptr, type, own)) {
    mexErrMsgIdAndTxt("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Return index directly to class */
  pm_ind = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ind) = (uint64_T)ind;
  if(!pm_ind) mexErrMsgIdAndTxt("SWIG:NewPointerObj","mxCreateNumericMatrix failed");
  
  return pm_ind;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm) {
  /* Get pointer object */
  SwigPtr* p = SWIG_Matlab_getSwigPtr(pm, 0, 0);

  if (!p) {
    return 0;
  }
  return p->own;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  size_t ind = 0;
  int external = 0;

  /* Get pointer object */
  SwigPtr* p = SWIG_Matlab_getSwigPtr(pm, &ind, &external);
  if (!p) {
    mexWarnMsgIdAndTxt("SWIG:ConvertPtrAndOwn", "No such element");
    return 0;
  }

  swig_cast_info *tc;
  bool same_type = false;
  while (p) {
    /* Loop over types */
    swig_type_info *p_type = p->type;

    /* No type cast needed */
    if (p_type==type || !type) {
      same_type = true;
      break;
    }

    /* Check if type conversion is possible */
    tc = SWIG_TypeCheckStruct(p_type, type);
    if (tc) break;

    /* Check next type */
    p = p->next;
  }

  /* Conversion not possible */
  if (!same_type && !tc) return SWIG_ERROR;

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;
    
  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    if (!external) {
      SWIG_Matlab_DeletePointer(ind);
    } else {
      mexErrMsgIdAndTxt("SWIG:ConvertPtrAndOwn","Attempting to delete an external pointer");
    }
  }

  /* No type cast needed */
  if (same_type || !ptr) {
    return SWIG_OK;
  }

  /* Do type-cast */
  int newmemory = 0;
  *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
  if (newmemory == SWIG_CAST_NEW_MEMORY) {
    if (own) {
      *own = *own | SWIG_CAST_NEW_MEMORY;
    } else {
      /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
      mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
      return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  swig_module_info *pointer = 0;
  mxArray *module = mexGetVariable("global", "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (module){
    pointer = (swig_module_info *)(*(uint64_T *)mxGetData(module));
    mxDestroyArray(module);
  }
  return pointer;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer) {
  mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
  *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
  int status;
  /* Put variable in MATLAB global workspace */
  status=mexPutVariable("global", "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, module);
  if (status==1){
    mexErrMsgIdAndTxt("SWIG:SetModule",
      "Could not put variable in global workspace.\n");
  }
  mxDestroyArray(module);
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */
